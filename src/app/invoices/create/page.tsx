"use client"; 

import PageHeader from "@/components/page-header";
import { InvoiceForm, type InvoiceFormValues } from "@/components/invoice-form";
import { useToast } from "@/hooks/use-toast";
import { useRouter } from "next/navigation"; 
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { saveInvoice } from "@/lib/firestore-actions";
import type { StoredInvoice } from '@/types/database';

// Moved outside the component to prevent recreation on every render
const defaultNewInvoiceValues: Partial<InvoiceFormValues> = {
  invoiceDate: new Date(), 
  dueDate: null, 
  items: [{
    productId: "",
    description: "",
    quantity: 1,
    price: 0,
    gstCategory: "",
    applyIgst: true,
    applyCgst: false,
    applySgst: false,
    igstRate: 18,
    cgstRate: 9,
    sgstRate: 9
  }],
  customerId: "",
  customerName: "",
  customerEmail: "",
  customerAddress: "",
  customerPhone: "",
  invoiceNumber: "", // Will be generated in InvoiceForm
  notes: "",
  termsAndConditions: "Payment due within 30 days. All goods remain property of the seller until paid in full.",
  paymentStatus: "Unpaid",
  paymentMethod: "",
  shipmentDetails: {
    shipDate: null, trackingNumber: "", carrierName: "", consigneeName: "", consigneeAddress: "",
    consigneeGstin: "", consigneeStateCode: "", transportationMode: "", lrNo: "", vehicleNo: "",
    dateOfSupply: null, placeOfSupply: ""
  }
};


export default function CreateInvoicePage() {
  const { toast } = useToast();
  const router = useRouter();
  const queryClient = useQueryClient();

  const createMutation = useMutation({
    mutationFn: (newInvoice: Omit<StoredInvoice, 'id' | 'createdAt' | 'updatedAt'>) => saveInvoice(newInvoice),
    onSuccess: (invoiceId) => {
      toast({
        title: "Invoice Created",
        description: `Invoice has been successfully created and saved.`,
      });
      queryClient.invalidateQueries({ queryKey: ['invoices'] });
      router.push(`/invoices/${invoiceId}`);
    },
    onError: (error) => {
      console.error('Error saving invoice:', error);
      toast({
        title: "Error",
        description: "Failed to create invoice. Please try again.",
        variant: "destructive",
      });
    },
  });

  const handleSubmit = async (data: InvoiceFormValues & { amount: number }) => {
    // The ID is generated by firestore, so we omit it here.
    // The form generates a temporary one, but we don't need it for saving.
    const { id, ...invoiceData } = data;
    createMutation.mutate(invoiceData);
  };

  const handleCancel = () => {
    router.push("/invoices");
  };

  return (
    <div className="space-y-6">
      <PageHeader title="Create New Invoice" description="Fill in the details below to create a new invoice." />
      <InvoiceForm 
        onSubmit={handleSubmit} 
        defaultValues={defaultNewInvoiceValues}
        isLoading={createMutation.isPending}
        onCancel={handleCancel}
      />
    </div>
  );
}
